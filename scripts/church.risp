(define (zero f x) x)
(define (zero? n) (n (lambda (x) #f) #t))
(define (succ n) (lambda (f x) (f (n f x))))
(define (pred n) (lambda (f x)
                        (let ((fg (lambda (h g) (g (h f))))
                              (skip (lambda (u) x))
                              (app (lambda (u) u)))
                          ((n fg skip) app))))

(define pc0 (cons zero zero))
(define (sc p) (cons (cdr p) (succ (cdr p))))
(define (pred-cons n) (car (n sc pc0)))

(define (add a b) (lambda (f x) (a f (b f x))))
(define (minus a b) (b pred a))
(define (mul a b) (lambda (f x) (a (b f) x)))
(define (exp a b) (lambda (f x) ((b a f) x)))

(define one (succ zero))
(define two (add one one))
(define four (mul two two))
(define three (add two one))
(define nine (exp three two))
(define ten (add nine one))
(define thirteen (add nine four))
(define church-1024 (exp two ten))
(define church-1022 (minus church-1024 two))

(define (arbitrary-church n) (lambda (f x)
                              (let loop ((n n) (sum x))
                                (if (<= n 0) sum
                                  (loop (- n 1) (f sum))))))

(require std/arithmetic)
(define (plus1 n) (+ n 1))
(define (instantialize n) (n plus1 0))

(do
  (-> (print "1022 in church-encoding is "))
  (-> (print (instantialize church-1022)))
  (-> (print ".\n"))
  (-> (print "Predecessor of church-zero is "))
  (-> (print (instantialize (pred zero))))
  (-> (print ".\n"))
  (-> (print "arbitrary-church-256 is "))
  (-> (print (instantialize (arbitrary-church 256))))
  (-> (print ".\n"))
  (-> (print "Predecessor of arbitrary-church-256 is "))
  (-> (print (instantialize (pred (arbitrary-church 256)))))
  (-> (print ".\n")))
