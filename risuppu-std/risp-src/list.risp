(define filter (lambda (predicate lst)
                 (flat-map
                   lst
                   (lambda (elem)
                     (if (predicate elem)
                       (list elem)
                       '())))))

(define rev (lambda (lst)
              (fold
                (lambda (sum elem) (cons elem sum))
                '()
                lst)))

;; Import bool module
(define zip (lambda (a b)
              (let loop ((a a)
                         (b b)
                         (lst '()))
                (if (or (eq a '()) (eq b '())) (rev lst)
                  (loop
                    (cdr a)
                    (cdr b)
                    (cons (list (car a) (car b)) lst))))))

(define unzip (lambda (lst)
                (let loop ((lst lst)
                           (a '())
                           (b '()))
                  (if (eq lst '()) (list (rev a) (rev b))
                    (loop
                      (cdr lst)
                      (car (car lst))
                      (car (cdr (car lst))))))))

(define find (lambda (predicate lst)
               (let loop ((remaining lst))
                 (if (predicate (car remaining))
                   remaining
                   (loop (cdr remaining))))))

;; Must import arithmetic module
(define nth (lambda (lst n)
              (let nth* ((remaining lst) (n n))
                (cond ((< n 0) '())
                      ((eq n 0) (car remaining))
                      (else (nth* (cdr remaining) (- n 1)))))))

;; Import arithmetic module
(define position (lambda (predicate lst)
                   (let loop ((remaining lst)
                              (pos 0))
                     (if (predicate (car remaining)) pos
                       (loop (cdr remaining) (+ pos 1))))))

;; Import arithmetic module
(define count (lambda (lst)
                (fold
                  (lambda (count elem) (+ count 1))
                  0
                  lst)))

(provide list __builtin_list)
(provide fold __builtin_fold)
(provide map __builtin_map)
(provide flat-map __builtin_flat-map)
(provide filter filter)
(provide rev rev)
(provide zip zip)
(provide unzip unzip)
(provide find find)
(provide nth nth)
(provide position position)
(provide count count)
(provide len count)
