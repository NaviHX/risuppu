(define even? (lambda (n)
                (eq (mod n 2) 0)))

(define odd? (lambda (n)
               (eq (mod n 2) 1)))

(provide + __builtin_+)
(provide - __builtin_-)
(provide * __builtin_*)
(provide / __builtin_/)
(provide mod __builtin_mod)
(provide even? even?)
(provide odd? odd?)

(provide greater? __builtin_greater)
(provide less? __builtin_less)
(provide > __builtin_greater)
(provide < __builtin_less)
(provide greater-eq? __builtin_ge)
(provide less-eq? __builtin_le)
(provide >= __builtin_ge)
(provide <= __builtin_le)

(define quotient/remainder (lambda (m n) (list (/ m n) (mod m n))))
(provide quotient/remainder quotient/remainder)
(provide q/r quotient/remainder)
